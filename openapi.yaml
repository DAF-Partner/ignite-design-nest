openapi: 3.0.3
info:
  title: B2B Debt Collection Platform API
  description: Professional GDPR-compliant debt collection management system
  version: 1.0.0
  contact:
    name: API Support
    email: support@debtcollection.com

servers:
  - url: https://api.debtcollection.com/v1
    description: Production server
  - url: https://staging-api.debtcollection.com/v1
    description: Staging server

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      required: [id, email, name, role, createdAt]
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [CLIENT, AGENT, ADMIN, DPO]
        clientId:
          type: string
          format: uuid
        department:
          type: string
        phone:
          type: string
        isActive:
          type: boolean
          default: true
        permissions:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        lastLoginAt:
          type: string
          format: date-time

    Case:
      type: object
      required: [id, reference, clientId, debtor, amount, currency, status, createdAt]
      properties:
        id:
          type: string
          format: uuid
        reference:
          type: string
        clientId:
          type: string
          format: uuid
        clientName:
          type: string
        assignedAgentId:
          type: string
          format: uuid
        assignedAgentName:
          type: string
        debtor:
          $ref: '#/components/schemas/Debtor'
        amount:
          type: number
          format: decimal
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
        originalAmount:
          type: number
          format: decimal
        status:
          type: string
          enum: [new, in_progress, awaiting_approval, legal_stage, closed]
        description:
          type: string
        originalCreditor:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        dueDate:
          type: string
          format: date-time
        lastActionAt:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string

    Debtor:
      type: object
      required: [name, email, address]
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          $ref: '#/components/schemas/Address'

    Address:
      type: object
      required: [city, country]
      properties:
        street:
          type: string
        city:
          type: string
        postalCode:
          type: string
        country:
          type: string

    Approval:
      type: object
      required: [id, caseId, type, state, requestedBy, description, createdAt]
      properties:
        id:
          type: string
          format: uuid
        caseId:
          type: string
          format: uuid
        caseName:
          type: string
        type:
          type: string
          enum: [expense, legal_escalation, retrieval, settlement_approval, payment_plan, write_off]
        state:
          type: string
          enum: [pending, approved, rejected]
        requestedBy:
          type: string
          format: uuid
        requestedByName:
          type: string
        amount:
          type: number
          format: decimal
        currency:
          type: string
        description:
          type: string
        clauseId:
          type: string
        clauseText:
          type: string
        feeBreakdown:
          $ref: '#/components/schemas/FeeBreakdown'
        createdAt:
          type: string
          format: date-time
        decidedAt:
          type: string
          format: date-time
        decidedBy:
          type: string
          format: uuid
        decisionNotes:
          type: string

    FeeBreakdown:
      type: object
      required: [baseAmount, percentage, fixedFee, vatAmount, totalFee, currency]
      properties:
        baseAmount:
          type: number
          format: decimal
        percentage:
          type: number
          format: decimal
        fixedFee:
          type: number
          format: decimal
        vatAmount:
          type: number
          format: decimal
        totalFee:
          type: number
          format: decimal
        currency:
          type: string

    Invoice:
      type: object
      required: [id, caseId, invoiceNumber, amount, vatAmount, totalAmount, currency, status, dueDate, createdAt]
      properties:
        id:
          type: string
          format: uuid
        caseId:
          type: string
          format: uuid
        caseName:
          type: string
        clientId:
          type: string
          format: uuid
        clientName:
          type: string
        invoiceNumber:
          type: string
        amount:
          type: number
          format: decimal
        vatAmount:
          type: number
          format: decimal
        totalAmount:
          type: number
          format: decimal
        currency:
          type: string
        status:
          type: string
          enum: [draft, sent, paid, overdue, cancelled]
        dueDate:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        paidAt:
          type: string
          format: date-time
        pdfUrl:
          type: string
          format: uri
        items:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceItem'

    InvoiceItem:
      type: object
      required: [description, quantity, unitPrice, vatRate, total]
      properties:
        description:
          type: string
        quantity:
          type: number
          format: decimal
        unitPrice:
          type: number
          format: decimal
        vatRate:
          type: number
          format: decimal
        total:
          type: number
          format: decimal

    GdprRequest:
      type: object
      required: [id, type, status, requestedBy, dataSubject, description, dueDate, createdAt]
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [SAR, ERASURE, RECTIFICATION, PORTABILITY, OBJECTION]
        status:
          type: string
          enum: [pending, processing, completed, cancelled, rejected]
        requestedBy:
          type: string
          format: uuid
        requestedByName:
          type: string
        dataSubject:
          type: string
        description:
          type: string
        dueDate:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        downloadUrl:
          type: string
          format: uri
        affectedCases:
          type: array
          items:
            type: string
            format: uuid

    Tariff:
      type: object
      required: [id, name, type, currency, clauseText, isActive, createdAt]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [percentage, fixed, tiered]
        percentage:
          type: number
          format: decimal
        fixedAmount:
          type: number
          format: decimal
        fixedFee:
          type: number
          format: decimal
        currency:
          type: string
        minAmount:
          type: number
          format: decimal
        maxAmount:
          type: number
          format: decimal
        minimumFee:
          type: number
          format: decimal
        maximumFee:
          type: number
          format: decimal
        clauseText:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        tiers:
          type: array
          items:
            $ref: '#/components/schemas/TariffTier'

    TariffTier:
      type: object
      required: [minAmount, percentage]
      properties:
        minAmount:
          type: number
          format: decimal
        maxAmount:
          type: number
          format: decimal
          nullable: true
        percentage:
          type: number
          format: decimal

    MessageTemplate:
      type: object
      required: [id, name, subject, content, type, locale, version, isActive, createdAt]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        subject:
          type: string
        content:
          type: string
        type:
          type: string
          enum: [initial_contact, reminder, legal_notice, settlement_offer]
        channel:
          type: string
          enum: [email, sms, letter, phone]
        locale:
          type: string
        version:
          type: integer
        isActive:
          type: boolean
        legalNotice:
          type: string
        variables:
          type: array
          items:
            $ref: '#/components/schemas/TemplateVariable'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    TemplateVariable:
      type: object
      required: [name, description, required]
      properties:
        name:
          type: string
        description:
          type: string
        required:
          type: boolean
        defaultValue:
          type: string

    PaginatedResponse:
      type: object
      properties:
        data:
          type: array
          items: {}
        total:
          type: integer
        hasNext:
          type: boolean
        nextCursor:
          type: string

    ApiResponse:
      type: object
      properties:
        data: {}
        success:
          type: boolean
        message:
          type: string

    ProblemDetails:
      type: object
      required: [title, detail, status]
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        detail:
          type: string
        status:
          type: integer
        instance:
          type: string
          format: uri
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string

paths:
  # Authentication
  /auth/login:
    post:
      tags: [Authentication]
      summary: Login user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  # Cases
  /cases:
    get:
      tags: [Cases]
      summary: Get cases with pagination and filtering
      parameters:
        - name: status
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [new, in_progress, awaiting_approval, legal_stage, closed]
        - name: clientId
          in: query
          schema:
            type: string
            format: uuid
        - name: assignedAgentId
          in: query
          schema:
            type: string
            format: uuid
        - name: amountMin
          in: query
          schema:
            type: number
        - name: amountMax
          in: query
          schema:
            type: number
        - name: search
          in: query
          schema:
            type: string
        - name: cursor
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
      responses:
        200:
          description: Cases retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Case'
    post:
      tags: [Cases]
      summary: Create new case
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [debtor, amount, currency, reference, clientId]
              properties:
                debtor:
                  $ref: '#/components/schemas/Debtor'
                amount:
                  type: number
                  format: decimal
                currency:
                  type: string
                description:
                  type: string
                reference:
                  type: string
                originalCreditor:
                  type: string
                clientId:
                  type: string
                  format: uuid
      responses:
        201:
          description: Case created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - properties:
                      data:
                        $ref: '#/components/schemas/Case'

  /cases/{id}:
    get:
      tags: [Cases]
      summary: Get case by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Case retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - properties:
                      data:
                        $ref: '#/components/schemas/Case'
        404:
          description: Case not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    patch:
      tags: [Cases]
      summary: Update case
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [new, in_progress, awaiting_approval, legal_stage, closed]
                assignedAgentId:
                  type: string
                  format: uuid
                description:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: Case updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - properties:
                      data:
                        $ref: '#/components/schemas/Case'

  # Approvals
  /approvals:
    get:
      tags: [Approvals]
      summary: Get approvals with filtering
      parameters:
        - name: state
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [pending, approved, rejected]
        - name: type
          in: query
          schema:
            type: string
            enum: [expense, legal_escalation, retrieval, settlement_approval, payment_plan, write_off]
        - name: caseId
          in: query
          schema:
            type: string
            format: uuid
        - name: cursor
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        200:
          description: Approvals retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Approval'
    post:
      tags: [Approvals]
      summary: Create approval request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [caseId, type, description]
              properties:
                caseId:
                  type: string
                  format: uuid
                type:
                  type: string
                  enum: [expense, legal_escalation, retrieval, settlement_approval, payment_plan, write_off]
                amount:
                  type: number
                  format: decimal
                currency:
                  type: string
                description:
                  type: string
                clauseId:
                  type: string
      responses:
        201:
          description: Approval created successfully

  /approvals/{id}:
    patch:
      tags: [Approvals]
      summary: Update approval (approve/reject)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [state]
              properties:
                state:
                  type: string
                  enum: [approved, rejected]
                decisionNotes:
                  type: string
      responses:
        200:
          description: Approval updated successfully

  # Invoices
  /invoices:
    get:
      tags: [Invoices]
      summary: Get invoices
      parameters:
        - name: status
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [draft, sent, paid, overdue, cancelled]
        - name: clientId
          in: query
          schema:
            type: string
            format: uuid
        - name: caseId
          in: query
          schema:
            type: string
            format: uuid
        - name: cursor
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        200:
          description: Invoices retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Invoice'

  # GDPR Requests
  /gdpr/requests:
    get:
      tags: [GDPR]
      summary: Get GDPR requests
      parameters:
        - name: type
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [SAR, ERASURE, RECTIFICATION, PORTABILITY, OBJECTION]
        - name: status
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [pending, processing, completed, cancelled, rejected]
      responses:
        200:
          description: GDPR requests retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/GdprRequest'
    post:
      tags: [GDPR]
      summary: Create GDPR request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [type, dataSubject, description]
              properties:
                type:
                  type: string
                  enum: [SAR, ERASURE, RECTIFICATION, PORTABILITY, OBJECTION]
                dataSubject:
                  type: string
                description:
                  type: string
      responses:
        201:
          description: GDPR request created successfully

  # Users
  /users:
    get:
      tags: [Users]
      summary: Get users
      parameters:
        - name: role
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [CLIENT, AGENT, ADMIN, DPO]
        - name: isActive
          in: query
          schema:
            type: boolean
      responses:
        200:
          description: Users retrieved successfully

  # Tariffs
  /tariffs:
    get:
      tags: [Tariffs]
      summary: Get tariffs
      parameters:
        - name: isActive
          in: query
          schema:
            type: boolean
        - name: type
          in: query
          schema:
            type: string
            enum: [percentage, fixed, tiered]
      responses:
        200:
          description: Tariffs retrieved successfully

  # Templates
  /templates:
    get:
      tags: [Templates]
      summary: Get message templates
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [initial_contact, reminder, legal_notice, settlement_offer]
        - name: locale
          in: query
          schema:
            type: string
        - name: isActive
          in: query
          schema:
            type: boolean
      responses:
        200:
          description: Templates retrieved successfully

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Cases
    description: Debt collection case management
  - name: Approvals
    description: Approval workflow management
  - name: Invoices
    description: Invoice management
  - name: GDPR
    description: GDPR compliance operations
  - name: Users
    description: User management
  - name: Tariffs
    description: Tariff and pricing management
  - name: Templates
    description: Message template management